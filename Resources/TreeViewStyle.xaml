<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:local="clr-namespace:BCS.CADs.Synchronization.Views"
                    xmlns:vm="clr-namespace:BCS.CADs.Synchronization"
                    xmlns:ViewModels="clr-namespace:BCS.CADs.Synchronization.ViewModels" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--
    
                     
                    xmlns:vm1="clr-namespace:BCS.CADs.Synchronization.ViewModels"
                    xmlns:vm2="clr-namespace:BCS.CADs.Synchronization.ViewModels" 
                    xmlns:operOption="clr-namespace:BCS.CADs.Synchronization.Classes"
    
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:BCS.CADs.Synchronization.Views"
      xmlns:ViewModels="clr-namespace:BCS.CADs.Synchronization.ViewModels"-->

    <!--<ViewModels:StringImageToResource x:Key="StringToResource" />-->


    <ResourceDictionary.MergedDictionaries >
        <ResourceDictionary Source="/BCS.CADs.Synchronization;component/Styles/SvgCADImages.xaml"  />
    </ResourceDictionary.MergedDictionaries>
    <ViewModels:StringImageToResource x:Key="StringToResource" />
    <ViewModels:ThumbnailToPathConverter x:Key="ImageIdToPathConverter" ImagePath="DisplayImage" />


    <!--<Style x:Key="ExpandCollapseToggleStyle"
       TargetType="ToggleButton">
        <Setter Property="Focusable"
          Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid x:Name="ButtonOver" Opacity="0" Margin="0,4,0,0" 
                                   HorizontalAlignment="Right" VerticalAlignment="Top" 
                                   Width="16" Height="16">
                            <Rectangle Stroke="#FF027BA6" HorizontalAlignment="Stretch" 
                                       VerticalAlignment="Stretch" Width="Auto" Height="Auto" 
                                       RadiusX="3" RadiusY="3">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF00BCFF" Offset="0" />
                                        <GradientStop Color="#FF027BA6" Offset="1" />
                                        <GradientStop Color="#FF00A5E0" Offset="0.5" />
                                        <GradientStop Color="#FF005674" Offset="0.501" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="CollapsedVisualOver" 
                                       HorizontalAlignment="Left" VerticalAlignment="Top" 
                                       Width="2" Height="8" RadiusX="0" RadiusY="0" 
                                       Fill="#FFFFFFFF" Margin="7,4,0,0" />
                            <Rectangle RadiusX="0" RadiusY="0" Fill="#FFFFFFFF" 
                                       HorizontalAlignment="Left" VerticalAlignment="Top" 
                                       Width="8" Height="2" Margin="4,7,0,0" />
                        </Grid>
                        <Grid x:Name="Button" Margin="0,4,0,0" HorizontalAlignment="Right" 
                           VerticalAlignment="Top" Width="16" Height="16">
                            <Rectangle Stroke="#FF027BA6" HorizontalAlignment="Stretch" 
                               VerticalAlignment="Stretch" Width="Auto" Height="Auto" 
                               RadiusX="3" RadiusY="3" Fill="#FF00A2DC">
                            </Rectangle>
                            <Rectangle x:Name="CollapsedVisual" HorizontalAlignment="Left" 
                               VerticalAlignment="Top" Width="2" Height="8" RadiusX="0" 
                               RadiusY="0" Fill="#FFFFFFFF" Margin="7,4,0,0" />
                            <Rectangle RadiusX="0" RadiusY="0" Fill="#FFFFFFFF" 
                               HorizontalAlignment="Left" Margin="4,7,0,0" 
                               VerticalAlignment="Top" Width="8" Height="2" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ButtonOver"  Storyboard.TargetProperty="(UIElement.Opacity)" To="1"/>
                                        <DoubleAnimation Storyboard.TargetName="Button" Storyboard.TargetProperty="(UIElement.Opacity)" To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ButtonOver" Storyboard.TargetProperty="(UIElement.Opacity)" To="0"/>
                                        <DoubleAnimation Storyboard.TargetName="Button" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.5" Storyboard.TargetName="CollapsedVisualOver" Storyboard.TargetProperty="(UIElement.Opacity)" To="0"/>
                                        <DoubleAnimation Duration="0:0:0.5" Storyboard.TargetName="CollapsedVisual" Storyboard.TargetProperty="(UIElement.Opacity)" To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.5" Storyboard.TargetName="CollapsedVisualOver" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"/>
                                        <DoubleAnimation Duration="0:0:0.5" Storyboard.TargetName="CollapsedVisual" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0,0,0,0"
                     StrokeThickness="5"
                     Stroke="Black"
                     StrokeDashArray="1 2"
                     Opacity="0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type TreeViewItem}"
       TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
          Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
          Value="{Binding Path=HorizontalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
          Value="{Binding Path=VerticalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding"
          Value="1,0,0,0" />
        <Setter Property="Foreground"
          Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FocusVisualStyle"
          Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                              Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="Expander"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        ClickMode="Press"
                        IsChecked="{Binding IsExpanded, 
            RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="Bd"
                  Grid.Column="1"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header"
                              ContentSource="Header"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                          Grid.Row="1"
                          Grid.Column="1"
                          Grid.ColumnSpan="2"
                          Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                   Value="false">
                            <Setter TargetName="Expander"
                    Property="Visibility"
                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                         Value="false" />
                                <Condition Property="Width"
                         Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                    Property="MinWidth"
                    Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                         Value="false" />
                                <Condition Property="Height"
                         Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                    Property="MinHeight"
                    Value="19" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->


    
    <!-- 
    
    <ViewModels:PopupMenuItem x:Key="ExecPopupMenuItem" />
    <vm1:MainWindowViewModel x:Key="viewmodel1"/>
    <vm2:SearchItemsViewModel x:Key="viewmodel2"/>
    <operOption:OperationOption x:Key="oper"/>    
    
    -->


    <!--<ViewModels:BooleanToCollapsedVisibilityConverter x:Key="booleanToVisibilityConverter" />
    <ContextMenu x:Key="ChildContextMenu">
        <MenuItem Header="插入分件" x:Name="insertItem"                   
                  Visibility="{Binding Source={StaticResource viewmodel2},Path=IsInsert, Converter={StaticResource booleanToVisibilityConverter}}"
                  Command="{Binding Source={StaticResource viewmodel1},Path=SyncInsertItem}"           
                  CommandParameter="{Binding RelativeSource={RelativeSource self}}"  
                  >
                 <MenuItem.Style>
                    <Style TargetType="MenuItem">
                        <Setter Property="IsChecked" Value="False"/>
                    </Style>
                 </MenuItem.Style>
            <MenuItem.Icon>
                <Image Width="24" Height="24" Source="{StaticResource InsertFieldBelowDrawingImage}"/>
            </MenuItem.Icon>
        </MenuItem>

        <MenuItem Header="替換分件" x:Name="replaceItem"                                     
                  Visibility="{Binding Source={StaticResource viewmodel2},Path=IsReplacement, Converter={StaticResource booleanToVisibilityConverter}}"
                  Command="{Binding Source={StaticResource viewmodel1},Path=SyncReplaceItem}"           
                  CommandParameter="{Binding RelativeSource={RelativeSource self}}"                   
                  >
            <MenuItem.Icon>
                <Image Width="24" Height="24" Source="{StaticResource ReplaceRevisionDrawingImage}"/>
            </MenuItem.Icon>
        </MenuItem>
    </ContextMenu>-->

    <HierarchicalDataTemplate  x:Key="CheckBoxItemTemplate" ItemsSource="{Binding Child}">
        <StackPanel Orientation="Horizontal" Margin="10,0,0,0" >
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                <Image Width="20" Height="20" x:Name="iconIsChecked" Source="{Binding IsChecked,Converter={StaticResource ResourceKey=StringToResource}}"></Image>
                <!--<Image Width="24" Height="24" x:Name="iconClassName" Source="{Binding ClassName,Converter={StaticResource ResourceKey=StringToResource}}"></Image>-->
                <Image Width="24" Height="24" x:Name="iconClassName" Source="{Binding ClassThumbnail}"/>
                <Image Width="24" Height="24" x:Name="iconAccessRights" Source="{Binding AccessRights,Converter={StaticResource ResourceKey=StringToResource}}"></Image>
                <Image Width="24" Height="24" x:Name="iconRestrictedStatus" Source="{Binding RestrictedStatus,Converter={StaticResource ResourceKey=StringToResource}}"></Image>
                <Image Width="24" Height="24" x:Name="iconVersionStatus" Source="{Binding VersionStatus,Converter={StaticResource ResourceKey=StringToResource}}"></Image>

                <!--<Image x:Name="IconImage" Height="24" Width="24" Source="{Binding Thumbnail,Converter={StaticResource ResourceKey=ImageIdToPathConverter}}" Cursor="Hand">
                    <Image.InputBindings>
                        <MouseBinding Gesture="LeftClick" Command="{Binding ShowThumbnailImage}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Image}}"/>
                    </Image.InputBindings>
                </Image>-->

                <Button Height="24" Width="24" Margin="-30,0,-30,0" HorizontalAlignment="Left" VerticalAlignment="Center" Command="{Binding ShowThumbnailImage}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                    <Button.Template>
                        <ControlTemplate>
                            <Image x:Name="IconImage" Height="24" Width="24" Source="{Binding Thumbnail,Converter={StaticResource ResourceKey=ImageIdToPathConverter}}" Cursor="Hand"/>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                
            </StackPanel>
            <!--<CheckBox Focusable="False" IsEnabled="False" IsChecked="{Binding IsChecked}"  Visibility="Collapsed" VerticalAlignment="Center"/>-->
            <ContentPresenter VerticalAlignment="Center" Content="{Binding DisplayName}" />
            <!--
            <ContentPresenter Content="{Binding Name}" />
            
            <ContentPresenter Content="{Binding Name}"  ContextMenu="{StaticResource ChildContextMenu}"  />
            <ContentPresenter Content="{Binding Name}"  >
                <ContentPresenter.ContextMenu>
                    <ContextMenu >
                        <MenuItem Command="{Binding Parent.PlacementTarget.DataContext.SyncInsertItem, RelativeSource={RelativeSource Mode=Self}}"  
          Header="Insert Document"  />
                    </ContextMenu>
                </ContentPresenter.ContextMenu>
                
            </ContentPresenter>-->
        </StackPanel>
    </HierarchicalDataTemplate>
    
</ResourceDictionary>